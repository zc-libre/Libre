INSERT INTO public.blog_article (id, cover, article_name, summary, content, status, top, featured, gmt_create,
                                 gmt_modified, gmt_create_name, gmt_modified_name, is_deleted, category_id,
                                 enable_comment, article_type)
VALUES (1, '1702050892248-202201cthxrxhggtg.jpg', '测试文章', 'sfsfsf',
        '![202201cthxrxhggtg.jpg](http://127.0.0.1:9876/file/1702057235527-202201cthxrxhggtg.jpg)', 1, 1, 1,
        '2023-12-08 23:54:56.626668', '2023-12-09 01:40:55.952721', 'admin', 'admin', 0, 1718181774380523521, 1, 1);
INSERT INTO public.blog_article (id, cover, article_name, summary, content, status, top, featured, gmt_create,
                                 gmt_modified, gmt_create_name, gmt_modified_name, is_deleted, category_id,
                                 enable_comment, article_type)
VALUES (3, 'https://source.unsplash.com/63ZraxGFJV4/1200x628', 'whoami', '123', e'<img class="img-center" src="https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png" style="height: 200px; width: 200px; border-radius: 50%; margin-bottom: 15px" />

<style>
  .language-code span {
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 85%;
    white-space: break-spaces;
    background: var(--banner-cover);
    border-radius: 6px;
  }
  .language-code span img {
    transform: scale(0.85);
    cursor: default !important;
  }
  .language-code span:hover img {
    transform: scale(1.25);
    opacity: 1;
  }
  .img-center {margin: 0 auto;}
  .dark-obsidian .article .main .content {
    padding: 0 6rem;
  }
  @media screen and (max-width: 1200px) {
    .dark-obsidian .article .main .content {
      padding: 0 0.5rem;
    }
  }
</style>

<h3 id="Who-am-I"><a href="#Who-am-I" class="headerlink" title="Who am I"></a><code>Who am I</code></h3><p>G’day, mate! 👋 I am <b style="color: #0ed2f7"><strong>Benny Guo</strong></b> a professional web developer, who ❤️ to develop open source themes and applications. I have being a programmer for over 8 years, and have extensive experiences in both frontend and backend development.</p>
<p>Hello!👋 我是<b style="color: #0ed2f7"><strong>三钻</strong></b>，一个专业的 web 开发者，空余时间热爱 ❤️ 开发开源主题和应用。在前端和后端开发方面共有超过 8 年的丰富开发经验。</p>
<p>追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,<br>立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。</p>
<h3 id="✨-Skills-Tools-技能-工具"><a href="#✨-Skills-Tools-技能-工具" class="headerlink" title="✨ Skills &amp; Tools - 技能 &amp; 工具"></a>✨ <code>Skills &amp; Tools</code> - <code>技能 &amp; 工具</code></h3><div class="language-code flex flex-row gap-2">
  <b>Frontend: </b>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redux/redux-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vuejs/vuejs-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nuxtjs/nuxtjs-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/angularjs/angularjs-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/sass/sass-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-plain.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/babel/babel-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/webpack/webpack-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/npm/npm-original-wordmark.svg" /></span>
</div>

<div class="language-code flex flex-row gap-2">
  <b>Backend: </b>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nodejs/nodejs-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/php/php-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/laravel/laravel-plain.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mysql/mysql-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mongodb/mongodb-original.svg" /></span>
</div>

<div class="language-code flex flex-row gap-2">
  <b>Dev Tools: </b>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/git/git-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vscode/vscode-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/chrome/chrome-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/androidstudio/androidstudio-original.svg" /></span>
  <span><img height="25" width="25" src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/xcode/xcode-original.svg" /></span>
</div>

<h3 id="📜-Experiences-经验"><a href="#📜-Experiences-经验" class="headerlink" title="📜 Experiences - 经验"></a>📜 <code>Experiences</code> - <code>经验</code></h3><ul>
<li>Built a CMS system from ground up.</li>
<li>Built fully customized ERP system for B2B and ecommence-shop.</li>
<li>Built a Financial Risk Control System.</li>
<li>Built themes and website for companies.</li>
<li>Built Android and IOS APP with Ionic and Angular.</li>
<li>Lead a tech team of 20+ engineers.</li>
</ul>
<h3 id="🏆-Achievements-成就"><a href="#🏆-Achievements-成就" class="headerlink" title="🏆 Achievements - 成就"></a>🏆 <code>Achievements</code> - <code>成就</code></h3><ul>
<li>Built Obsidian.md theme recieved theme of the year for 2020.</li>
<li>Professional tech blogger on CSDN.</li>
<li>Star Blogger top 200 on CSDN in 2020.</li>
<li>Built Obsidian theme for Hexo recieved high feedback.</li>
</ul>
<h3 id="🔭-Working-on-项目"><a href="#🔭-Working-on-项目" class="headerlink" title="🔭 Working on - 项目"></a>🔭 <code>Working on</code> - <code>项目</code></h3><ul>
<li><a href="https://github.com/auroral-ui/hexo-theme-aurora">Hexo theme Aurora</a></li>
<li><a href="https://github.com/TriDiamond/Obsidian-Obsidianite">Obsidian.md theme Obsidianite</a></li>
<li>Aurora UI Components - WIP</li>
<li><a href="https://github.com/TriDiamond/hexo-theme-obsidian">Hexo theme Obsidian</a></li>
<li><a href="https://github.com/TriDiamond/projects">Side Projects</a></li>
<li>and other npm packages…</li>
</ul>
<h3 id="✍🏻-My-blogs-博客"><a href="#✍🏻-My-blogs-博客" class="headerlink" title="✍🏻 My blogs - 博客"></a>✍🏻 <code>My blogs</code> - <code>博客</code></h3><p><a href="https://tridiamond.tech/">BLOG</a> | <a href="https://dev.to/tridiamond">DEV.TO</a> | <a href="https://blog.csdn.net/TriDiamond6">CSDN</a> | <a href="https://juejin.im/user/1873223546578589/posts">掘金</a> | <a href="https://www.zhihu.com/people/tridiamond">知乎</a></p>
<h3 id="💬-Join-my-community-加入社区"><a href="#💬-Join-my-community-加入社区" class="headerlink" title="💬 Join my community - 加入社区"></a>💬 <code>Join my community</code> - <code>加入社区</code></h3><p><a href="https://discord.gg/VC7CrYfds5"><img src="https://discordapp.com/api/guilds/801943105913225246/widget.png?style=banner2" alt="Discord Banner 2"/></a></p>',
        1, 0, 0, '2023-12-23 16:34:38.000000', '2023-12-23 16:34:30.000000', 'admin', 'admin', 0, null, 1, 2);
INSERT INTO public.blog_article (id, cover, article_name, summary, content, status, top, featured, gmt_create,
                                 gmt_modified, gmt_create_name, gmt_modified_name, is_deleted, category_id,
                                 enable_comment, article_type)
VALUES (2, '1702212229054-202201cthxrxhggtg.jpg', 'java', 'cscsdcs', e'<p>😇😟代码实例</p><pre><code class="language-java">public void test() {
  System.out.println();
}</code></pre><p><br></p>', 1, 0, 1, '2023-12-10 20:43:56.874739', '2023-12-12 01:27:09.283108', 'admin', 'admin', 0,
        1718181725051314178, 1, 1);
INSERT INTO public.blog_article (id, cover, article_name, summary, content, status, top, featured, gmt_create,
                                 gmt_modified, gmt_create_name, gmt_modified_name, is_deleted, category_id,
                                 enable_comment, article_type)
VALUES (4, 'https://cdn.vlts.cn/articles/62fa4855e0e681e26cc5dee2db296acd.webp', null, null, e'<hr>
<p>这是一个留言板。</p>
<div class="custom-quote tip">
<span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path>
<path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path>
</svg></span>
<p class="custom-quote-title">提示</p>
<p>This is a Message Board.</p>
</div>
<hr>', 1, 0, 0, '2023-12-30 01:47:48.000000', '2023-12-30 01:47:51.000000', 'admin', 'admin', 0, null, 1, 3);
INSERT INTO public.blog_article (id, cover, article_name, summary, content, status, top, featured, gmt_create,
                                 gmt_modified, gmt_create_name, gmt_modified_name, is_deleted, category_id,
                                 enable_comment, article_type)
VALUES (5, 'https://cdn.vlts.cn/articles/62fa4855e0e681e26cc5dee2db296acd.webp', '虚拟线程', null, e'<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p><code>JDK19</code>于<code>2022-09-20</code>发布<code>GA</code>版本，该版本提供了虚拟线程的预览功能。下载<code>JDK19</code>之后翻看了一下有关虚拟线程的一些源码，跟早些时候的<code>Loom</code>项目构建版本基本并没有很大出入，也跟第三方<code>JDK</code>如鹅厂的<code>Kona</code>虚拟线程实现方式基本一致，这里分析一下虚拟线程设计与源码实现。</p>
<h2 id="Platform-Thread-与-Virtual-Thread"><a href="#Platform-Thread-与-Virtual-Thread" class="headerlink" title="Platform Thread 与 Virtual Thread"></a>Platform Thread 与 Virtual Thread</h2><p>因为引入了虚拟线程，原来<code>JDK</code>存在<code>java.lang.Thread</code>类，俗称线程，为了更好地区分虚拟线程和原有的线程类，引入了一个全新类<code>java.lang.VirtualThread</code>（<code>Thread</code>类的一个子类型），直译过来就是”虚拟线程”。</p>
<ul>
<li>题外话：在<code>Loom</code>项目早期规划里面，核心<code>API</code>其实命名为<code>Fiber</code>，直译过来就是”纤程”或者”协程”，后来成为了废案，在一些历史提交的<code>Test</code>类或者文档中还能看到类似于下面的代码：</li>
</ul>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.Fiber</span></span>
<span class="line"><span style="color: #E5C07B">Fiber</span><span style="color: #E06C75"> f </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Fiber</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">execute</span><span style="color: #ABB2BF">(&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Good morning&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">readLock</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #C678DD">try</span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Good night&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">readLock</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">unlock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Good night&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;);</span></span></code></pre></div><p><code>Thread</code>在此基础上做了不少兼容性工作。此外，还应用了建造者模式引入了线程建造器，提供了静态工厂方法<code>Thread#ofPlatform()</code>和<code>Thread#ofVirtual()</code>分别用于实例化<code>Thread</code>（工厂）建造器和<code>VirtualThread</code>（工厂）建造器，顾名思义，两种建造器分别用于创建<code>Thread</code>或者<code>VirtualThread</code>，例如：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// demo-1 build platform thread</span></span>
<span class="line"><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> platformThread </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ofPlatform</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">daemon</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;worker&quot;</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF">unstarted</span><span style="color: #ABB2BF">(runnable);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// demo-2 create platform thread factory</span></span>
<span class="line"><span style="color: #E5C07B">ThreadFactory</span><span style="color: #E06C75"> platformThreadFactory </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ofPlatform</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">daemon</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;worker-&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF">factory</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// demo-3 build virtual thread</span></span>
<span class="line"><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> virtualThread </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ofVirtual</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;virtual-worker&quot;</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF">unstarted</span><span style="color: #ABB2BF">(runnable);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// demo-4 create virtual thread factory</span></span>
<span class="line"><span style="color: #E5C07B">ThreadFactory</span><span style="color: #E06C75"> virtualThreadFactory </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ofVirtual</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">name</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;virtual-worker-&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">).</span><span style="color: #61AFEF">factory</span><span style="color: #ABB2BF">();</span></span></code></pre></div><p>更新的<code>JDK</code>文档中也把原来的<code>Thread</code>称为<code>Platform Thread</code>，可以更明晰地与<code>Virtual Thread</code>区分开来。这里<code>Platform Thread</code>直译为”平台线程”，其实就是”虚拟线程”出现之前的老生常谈的”线程”。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>后文会把 Platform Thread 称为平台线程，Virtual Thread 称为虚拟线程，或者直接用其英文名称</p></blockquote>
<p>那么平台线程与虚拟线程的联系和区别是什么？<code>JDK</code>中的每个<code>java.lang.Thread</code>实例也就是每个平台线程实例都在底层操作系统线程上运行<code>Java</code>代码，并且<strong>平台线程在运行代码的整个生命周期内捕获系统线程</strong>。可以得出一个结论，平台线程与底层系统线程是一一对应的，平台线程实例本质是由系统内核的线程调度程序进行调度，并且平台线程的总数量受限于系统线程的总数量。</p>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-1.webp" alt="vt-source-code-1"></p>
<p>总的来说，平台线程有下面的一些特点或者说限制：</p>
<ul>
<li>资源有限导致系统线程总量有限，进而导致与系统线程一一对应的平台线程有限</li>
<li>平台线程的调度依赖于系统的线程调度程序，当平台线程创建过多，会消耗大量资源用于处理线程上下文切换</li>
<li>每个平台线程都会开辟一块私有的栈空间，大量平台线程会占据大量内存</li>
</ul>
<p>这些限制导致开发者不能极大量地创建平台线程，为了满足性能需要，需要引入池化技术、添加任务队列构建消费者-生产者模式等方案去让平台线程适配多变的现实场景。显然，开发者们迫切需要一种轻量级线程实现，刚好可以弥补上面提到的平台线程的限制，这种轻量级线程可以满足：</p>
<ul>
<li>可以大量创建，例如十万级别、百万级别，而不会占据大量内存</li>
<li>由<code>JVM</code>进行调度和状态切换，并且与系统线程”松绑”</li>
<li>用法与原来平台线程差不多，或者说尽量兼容平台线程现存的<code>API</code></li>
</ul>
<p><code>Loom</code>项目中开发的虚拟线程就是为了解决这个问题，看起来它的运行示意图如下：</p>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-2.webp" alt="vt-source-code-2"></p>
<p>当然，平台线程不是简单地与虚拟线程进行<code>1:N</code>的绑定，后面的章节会深入分析虚拟线程的运行原理。</p>
<h2 id="虚拟线程实现原理"><a href="#虚拟线程实现原理" class="headerlink" title="虚拟线程实现原理"></a>虚拟线程实现原理</h2><p>虚拟线程是一种轻量级（用户模式）线程，这种线程是由<code>Java</code>虚拟机调度，而不是操作系统。虚拟线程占用空间小，任务切换开销几乎可以忽略不计，因此可以极大量地创建和使用。总体来看，虚拟线程实现如下：</p>
<div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #61AFEF">virtual</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">thread</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">=</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">continuation</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">+</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">scheduler</span></span></code></pre></div><p>虚拟线程会把任务（一般是<code>java.lang.Runnable</code>）包装到一个<code>Continuation</code>实例中：</p>
<ul>
<li>当任务需要阻塞挂起的时候，会调用<code>Continuation</code>的<code>yield</code>操作进行阻塞</li>
<li>当任务需要解除阻塞继续执行的时候，<code>Continuation</code>会被继续执行</li>
</ul>
<p><code>Scheduler</code>也就是执行器，会把任务提交到一个载体线程池中执行：</p>
<ul>
<li>执行器是<code>java.util.concurrent.Executor</code>的子类</li>
<li>虚拟线程框架提供了一个默认的<code>ForkJoinPool</code>用于执行虚拟线程任务</li>
</ul>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>下文会把 carrier thread 称为”载体线程”，指的是负责执行虚拟线程中任务的平台线程，或者说运行虚拟线程的平台线程称为它的载体线程</p></blockquote>
<p>操作系统调度系统线程，而<code>Java</code>平台线程与系统线程一一映射，所以平台线程被操作系统调度，但是虚拟线程是由<code>JVM</code>调度。<code>JVM</code>把虚拟线程分配给平台线程的操作称为<code>mount</code>（挂载），反过来取消分配平台线程的操作称为<code>unmount</code>（卸载）：</p>
<ul>
<li><code>mount</code>操作：虚拟线程挂载到平台线程，虚拟线程中包装的<code>Continuation</code>栈数据帧或者引用栈数据会被拷贝到平台线程的线程栈，这是一个从堆复制到栈的过程</li>
<li><code>unmount</code>操作：虚拟线程从平台线程卸载，大多数虚拟线程中包装的<code>Continuation</code>栈数据帧会留在堆内存中</li>
</ul>
<p>这个<code>mount -&gt; run -&gt; unmount</code>过程用伪代码表示如下：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #61AFEF">mount</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">Continuation</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">&#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">unmount</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p>从<code>Java</code>代码的角度来看，虚拟线程和它的载体线程暂时共享一个<code>OS</code>线程实例这个事实是不可见，因为虚拟线程的堆栈跟踪和线程本地变量与平台线程是完全隔离的。<code>JDK</code>中专门是用了一个<code>FIFO</code>模式的<code>ForkJoinPool</code>作为虚拟线程的调度程序，从这个调度程序看虚拟线程任务的执行流程大致如下：</p>
<ul>
<li>调度器（线程池）中的平台线程等待处理任务</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-5.webp" alt="vt-source-code-5"></p>
<ul>
<li>一个虚拟线程被分配平台线程，该平台线程作为运载线程执行虚拟线程中的任务</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-6.webp" alt="vt-source-code-6"></p>
<ul>
<li>虚拟线程运行其<code>Continuation</code>，从而执行基于<code>Runnable</code>包装的用户任务</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-7.webp" alt="vt-source-code-7"></p>
<ul>
<li>虚拟线程任务执行完成，标记<code>Continuation</code>终结，标记虚拟线程为终结状态，清空一些上下文变量，运载线程”返还”到调度器（线程池）中作为平台线程等待处理下一个任务</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-5.webp" alt="vt-source-code-5"></p>
<p>上面是描述一般的虚拟线程任务执行情况，在执行任务时候首次调用<code>Continuation#run()</code>获取锁（<code>ReentrantLock</code>）的时候会触发<code>Continuation</code>的<code>yield</code>操作让出控制权，等待虚拟线程重新分配运载线程并且执行，见下面的代码：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #C678DD">class</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">VirtualThreadLock</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">public</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">static</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">void</span><span style="color: #61AFEF"> main</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">String</span><span style="color: #ABB2BF">[] </span><span style="color: #E06C75; font-style: italic">args</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">throws</span><span style="color: #61AFEF"> </span><span style="color: #E5C07B">Exception</span><span style="color: #61AFEF"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">ReentrantLock</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">lock</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ReentrantLock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">startVirtualThread</span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">lock</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">();     </span><span style="color: #7F848E; font-style: italic">// &lt;------ 这里确保锁已经被另一个虚拟线程持有</span></span>
<span class="line"><span style="color: #ABB2BF">        &#125;);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">sleep</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1000</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">startVirtualThread</span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;first&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">lock</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">lock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">try</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;second&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            &#125; </span><span style="color: #C678DD">finally</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">                </span><span style="color: #E5C07B">lock</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">unlock</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">            &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;third&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        &#125;);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">sleep</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Long</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">MAX_VALUE</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre></div><ul>
<li>虚拟线程中任务执行时候首次调用<code>Continuation#run()</code>执行了部分任务代码，然后尝试获取锁，会导致<code>Continuation</code>的<code>yield</code>操作让出控制权（任务切换），也就是<code>unmount</code>，运载线程栈数据会移动到<code>Continuation</code>栈的数据帧中，保存在堆内存，虚拟线程任务完成（但是虚拟线程没有终结，同时其<code>Continuation</code>也没有终结和释放），运载线程被释放到执行器中等待新的任务；如果<code>Continuation</code>的<code>yield</code>操作失败，则会对运载线程进行<code>park</code>调用，阻塞在运载线程上</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-8.webp" alt="vt-source-code-8"></p>
<ul>
<li>当锁持有者释放锁之后，会唤醒虚拟线程获取锁（成功后），虚拟线程会重新进行<code>mount</code>，让虚拟线程任务再次执行，有可能是分配到另一个运载线程中执行，<code>Continuation</code>栈会的数据帧会被恢复到运载线程栈中，然后再次调用<code>Continuation#run()</code>恢复任务执行：</li>
</ul>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-9.webp" alt="vt-source-code-9"></p>
<ul>
<li>最终虚拟线程任务执行完成，标记<code>Continuation</code>终结，标记虚拟线程为终结状态，清空一些上下文变量，运载线程”返还”到调度器（线程池）中作为平台线程等待处理下一个任务</li>
</ul>
<p><code>Continuation</code>组件十分重要，它既是用户真实任务的包装器，也是任务切换虚拟线程与平台线程之间数据转移的一个句柄，它提供的<code>yield</code>操作可以实现任务上下文的中断和恢复。由于<code>Continuation</code>被封闭在<code>java.base/jdk.internal.vm</code>下，可以通过增加编译参数<code>--add-exports java.base/jdk.internal.vm=ALL-UNNAMED</code>暴露对应的功能，从而编写实验性案例，<code>IDEA</code>中可以按下图进行编译参数添加：</p>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-10.webp" alt="vt-source-code-10"></p>
<p>然后编写和运行下面的例子：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C678DD">import</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">jdk.internal.vm.Continuation</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">import</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">jdk.internal.vm.ContinuationScope</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #C678DD">class</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ContinuationDemo</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">public</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">static</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">void</span><span style="color: #61AFEF"> main</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">String</span><span style="color: #ABB2BF">[] </span><span style="color: #E06C75; font-style: italic">args</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">scope</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">ContinuationScope</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;scope&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">Continuation</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">continuation</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Continuation</span><span style="color: #ABB2BF">(scope, () </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Running before yield&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">Continuation</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">yield</span><span style="color: #ABB2BF">(scope);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Running after yield&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        &#125;);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;First run&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">// 第一次执行Continuation.run</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">continuation</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Second run&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #7F848E; font-style: italic">// 第二次执行Continuation.run</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">continuation</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">println</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;Done&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 运行代码，神奇的结果出现了</span></span>
<span class="line"><span style="color: #E5C07B">First</span><span style="color: #E06C75"> run</span></span>
<span class="line"><span style="color: #E5C07B">Running</span><span style="color: #E06C75"> before </span><span style="color: #C678DD">yield</span></span>
<span class="line"><span style="color: #E5C07B">Second</span><span style="color: #E06C75"> run</span></span>
<span class="line"><span style="color: #E5C07B">Running</span><span style="color: #E06C75"> after </span><span style="color: #C678DD">yield</span></span>
<span class="line"><span style="color: #E5C07B">Done</span></span></code></pre></div><p>这里可以看出<code>Continuation</code>的奇妙之处，<code>Continuation</code>实例进行<code>yield</code>调用后，再次调用其<code>run</code>方法就可以从<code>yield</code>的调用之处往下执行，从而实现了程序的中断和恢复。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>主要包括：</p>
<ul>
<li><code>Continuation</code></li>
<li><code>VirtualThread</code></li>
<li>线程建造器</li>
</ul>
<h3 id="Continuation"><a href="#Continuation" class="headerlink" title="Continuation"></a>Continuation</h3><p><code>Continuation</code>直译为”连续”，一般来说表示一种语言构造，<strong>使语言可以在任意点保存执行状态并且在之后的某个点返回</strong>。在<code>JDK</code>中对应类<code>jdk.internal.vm.Continuation</code>，这个类只有一句类注释<code>A one-shot delimited continuation</code>，直译为<strong>一个只能执行一次的回调函数</strong>。由于<code>Continuation</code>的成员和方法缺少详细的注释，并且大部分功能由<code>JVM</code>实现，这里只能阅读其一些骨干源码和上一小节编写的<code>Continuation</code>相关例子去了解其实现（笔者<code>C</code>语言比较薄弱，有兴趣的可以翻阅<code>JVM</code>的源码）。先看成员变量和构造函数：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// 判断是否需要保留当前线程的本地缓存，由系统参数jdk.preserveExtentLocalCache决定</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> PRESERVE_EXTENT_LOCAL_CACHE</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 真正要被执行的任务实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Runnable</span><span style="color: #E06C75"> target</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 标识Continuation的范围，</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation的父节点，如果为空的时候则为本地线程栈</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> parent</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation的子节点，非空时候说明在子Continuation中进行了yield操作</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> child</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 猜测为Continuation栈结构，由JVM管理，无法得知其真实作用</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">StackChunk</span><span style="color: #E06C75"> tail</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 标记Continuation是否已经完成</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> done</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 标记是否进行了mount操作</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">volatile</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> mounted </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// yield操作时候设置的信息</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Object</span><span style="color: #E06C75"> yieldInfo</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 标记一个未挂载的Continuation是否通过强制抢占式卸载</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> preempted</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 保留当前线程的本地缓存的副本</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Object</span><span style="color: #E06C75">[] extentLocalCache</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 构造函数，要求传入范围和任务包装实例</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">Continuation</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Runnable</span><span style="color: #E06C75"> target) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">target</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> target</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p><code>Continuation</code>是一个双向链表设计，它的唯一一组构造参数是<code>ContinuationScope</code>和<code>Runnable</code>：</p>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-11.webp" alt="vt-source-code-11"></p>
<p>这里不深入研究内部<code>StackChunk</code>、<code>Pinned</code>等实现，直接看<code>run</code>、<code>enter</code>系列方法和<code>yield</code>方法：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// Continuation.run()</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">run</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 设置死循环</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">while</span><span style="color: #E06C75"> (</span><span style="color: #D19A66">true</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 进行mount操作</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">mount</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setExtentLocalCache</span><span style="color: #ABB2BF">(extentLocalCache);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 如果Continuation已完成则抛出异常</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (done)</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">IllegalStateException</span><span style="color: #E06C75">(</span><span style="color: #98C379">&quot;Continuation terminated&quot;</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 获取当前虚拟线程分配的运载线程</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> t </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">currentCarrierThread</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parent </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parent </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getContinuation</span><span style="color: #ABB2BF">(t)</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">IllegalStateException</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">parent</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getContinuation</span><span style="color: #ABB2BF">(t);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 运载线程设置当前Continuation实例</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setContinuation</span><span style="color: #ABB2BF">(t, </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 判断ContinuationScope是否虚拟线程范围</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> isVirtualThread </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (scope </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">virtualThreadContinuationScope</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">isStarted</span><span style="color: #E06C75">()) &#123; </span><span style="color: #7F848E; font-style: italic">// is this the first run? (at this point we know !done)</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 激活enter系列方法，标记isContinue为false，标记是否虚拟线程范围</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">enterSpecial</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> isVirtualThread)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">isEmpty</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 激活enter系列方法，标记isContinue为true，标记是否虚拟线程范围</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">enterSpecial</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> isVirtualThread)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            &#125;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 设置内存屏障</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">fence</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">isEmpty</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> done </span><span style="color: #ABB2BF">:</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot;empty: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">isEmpty</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; done: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> done </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; cont: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">toHexString</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">identityHashCode</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">));</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 当前Continuation执行完成后，把运载线程的Continuation指向父Continuation</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setContinuation</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">currentCarrierThread</span><span style="color: #ABB2BF">(), </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">parent</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parent </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">                    </span><span style="color: #E5C07B">parent</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">child</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 进行后置的yield清理工作</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">postYieldCleanup</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 进行unmount操作</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">unmount</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 判断是否需要保留当前线程的本地缓存并处理</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (PRESERVE_EXTENT_LOCAL_CACHE) &#123;</span></span>
<span class="line"><span style="color: #E06C75">                    extentLocalCache </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">extentLocalCache</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">                &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">                    extentLocalCache </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                &#125;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setExtentLocalCache</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">            &#125; </span><span style="color: #C678DD">catch</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">Throwable</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">e</span><span style="color: #E06C75">) &#123; </span><span style="color: #E5C07B">e</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">printStackTrace</span><span style="color: #ABB2BF">();</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">exit</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span><span style="color: #E06C75"> &#125;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// we&#39;re now in the parent continuation</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #C678DD">instanceof</span><span style="color: #E06C75"> ContinuationScope</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 父Continuation的yieldInfo缓存当前的scope实例，清空当前Continuation的父节点和yieldInfo</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> scope) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">parent</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 这个位置是死循环的唯一跳出点</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 执行到这个位置说明在当前是子Continuation并且进行了yield操作，需要跳转到父Continuation进行yield操作</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">parent</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">child</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">parent</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">yield0</span><span style="color: #ABB2BF">((ContinuationScope)yieldInfo, </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">parent</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">child</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation.enter()系列方法</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 这是一个native方法，它最终会根据判断回调到enter()方法</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">native</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">enterSpecial</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> c</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> isContinue</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> isVirtualThread)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation的入口方法，用户任务回调的入口</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">DontInline</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">IntrinsicCandidate</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">enter</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> c</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> isContinue) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// This method runs in the &quot;entry frame&quot;.</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// A yield jumps to this method&#39;s caller as if returning from this method.</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">enter0</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">finish</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 真正任务包装器执行的回调方法</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">enter0</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">target</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation完成，标记done为true</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">finish</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    done </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">isEmpty</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation.yield()方法，静态方法</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> </span><span style="color: #C678DD">yield</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #E06C75"> scope) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 获取当前运载线程的Continuation实例</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> cont </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">JLA</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getContinuation</span><span style="color: #ABB2BF">(</span><span style="color: #61AFEF">currentCarrierThread</span><span style="color: #ABB2BF">());</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> c</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 基于Continuation实例当前向父节点遍历，直到匹配虚拟线程类型的ContinuationScope的Continuation，如果没有匹配的Continuation会抛出异常中断流程</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">for</span><span style="color: #E06C75"> (c </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> cont</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75"> c </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75"> c </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">c</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">parent</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (c </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">IllegalStateException</span><span style="color: #E06C75">(</span><span style="color: #98C379">&quot;Not in scope &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> scope)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 把当前的Continuation挂起到给定的ContinuationScope</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">cont</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">yield0</span><span style="color: #ABB2BF">(scope, </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 透过上下文猜测是当前的Continuation实例挂起到给定的ContinuationScope</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">yield0</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> child) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 强制抢占式卸载标记为false</span></span>
<span class="line"><span style="color: #E06C75">    preempted </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果当前Continuation实例的yieldInfo不等于传入的ContinuationScope实例，则进行更新，相等的情况下yieldInfo会保持是一个空值</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (scope </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> scope</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 最终的yield调用，最终当前Continuation就是阻塞在此方法，从下文源码猜测，当该方法唤醒后，res值为0的时候，当前Continuation实例会继续执行，返回其他值的时候则会打印pined线程栈</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> res </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">doYield</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 放置内存屏障防止指令重排，后面注释提到是防止编译器进行某些转换</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">storeFence</span><span style="color: #ABB2BF">();</span><span style="color: #E06C75"> </span><span style="color: #7F848E; font-style: italic">// needed to prevent certain transformations by the compiler</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> scope </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">:</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot;scope: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> scope </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; this.scope: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; yieldInfo: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; res: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> res</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> scope </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #C678DD">instanceof</span><span style="color: #E06C75"> Integer </span><span style="color: #ABB2BF">:</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot;scope: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> scope </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; this.scope: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scope</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; yieldInfo: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> </span><span style="color: #98C379">&quot; res: &quot;</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> res</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (child </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123; </span><span style="color: #7F848E; font-style: italic">// TODO: ugly &lt;----- 这个位置还有一句吐槽的代码注释：丑陋的代码</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (res </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">child</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> res</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (yieldInfo </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #C678DD">instanceof</span><span style="color: #E06C75"> Integer</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">child</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> yieldInfo</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">child</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> res</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (res </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            res </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (Integer)yieldInfo</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">yieldInfo</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (res </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// Continuation实例继续执行前回调</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">onContinue</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">else</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// Continuation固定在运载线程前回调，res是pined的级别</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">onPinned0</span><span style="color: #E06C75">(res)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> yieldInfo </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 返回布尔值结果表示当前Continuation实例是否会继续执行</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> res </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 最终的yield调用，看实现是抛出异常，猜测是由JVM实现</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">IntrinsicCandidate</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">doYield</span><span style="color: #E06C75">() &#123; </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">Error</span><span style="color: #E06C75">(</span><span style="color: #98C379">&quot;Intrinsic not installed&quot;</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75"> &#125;</span></span></code></pre></div><p>说实话，<code>Continuation</code>源码的可读性比想象中低，连代码注释也留下了”丑陋的”这句吐槽。通过上面源码分析和上一节<code>Continuation</code>的一个例子，可以得知<code>Continuation#yield()</code>可以让程序代码中断，然后再次调用<code>Continuation#run()</code>可以从上一个中断位置继续执行，<code>JVM</code>在这个过程中为使用者屏蔽了<code>Continuation</code>和运行此<code>Continuation</code>的平台线程之间的交互细节，让使用者可以专注实际的任务开发即可。</p>
<h3 id="VirtualThread"><a href="#VirtualThread" class="headerlink" title="VirtualThread"></a>VirtualThread</h3><p>前面花了不少篇幅介绍<code>Continuation</code>，它是一个全新的<code>API</code>。已有的<code>JUC</code>类库已经十分完善，如果可以把<code>Continuation</code>融入到已有的<code>JUC</code>体系，那么就可以通过线程池技术去管理运载线程，原有的大多数并发相关<code>API</code>也能直接在协程体系中使用。从这个背景来看，创造一个<code>Thread</code>类的全新子类用于融合<code>JUC</code>和<code>Continuation</code>是十分合适的，这样通过很小的改造成本就能通过<code>Java</code>继承特性把这个全新子类适配<code>JUC</code>体系，也能扩展一些<code>API</code>让它适配协程新引入的特性，这个全新的子类就是<code>java.lang.VirtualThread</code>：</p>
<p><img src="https://cdn.vlts.cn/202210/vt-source-code-12.webp" alt="vt-source-code-12"></p>
<p><code>VirtualThread</code>类的继承体系如下：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #C678DD">package</span><span style="color: #E06C75"> </span><span style="color: #C678DD">java.lang</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">class</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">VirtualThread</span><span style="color: #E06C75"> </span><span style="color: #C678DD">extends</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">BaseVirtualThread</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #E06C75">  </span><span style="color: #7F848E; font-style: italic">// ...</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">package</span><span style="color: #E06C75"> </span><span style="color: #C678DD">java.lang</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">sealed</span><span style="color: #E06C75"> </span><span style="color: #C678DD">abstract</span><span style="color: #E06C75"> </span><span style="color: #C678DD">class</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">BaseVirtualThread</span><span style="color: #E06C75"> </span><span style="color: #C678DD">extends</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">permits</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ThreadBuilders</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">BoundVirtualThread</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #E06C75">  </span><span style="color: #7F848E; font-style: italic">// ...</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre></div><p><code>VirtualThread</code>是<code>BaseVirtualThread</code>的子类，而<code>BaseVirtualThread</code>是一个”密封类”，它是<code>Thread</code>的子类，只对<code>VirtualThread</code>和<code>ThreadBuilders.BoundVirtualThread</code>开放，并且<code>VirtualThread</code>是<strong>包私有访问权限的</strong>同时用<code>final</code>关键字修饰，无法被继承。接着看<code>VirtualThread</code>的成员变量和构造函数：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.VirtualThread</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Unsafe实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Unsafe</span><span style="color: #E06C75"> U </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Unsafe</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getUnsafe</span><span style="color: #ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 虚拟线程的ContinuationScope静态常量</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ContinuationScope</span><span style="color: #E06C75"> VTHREAD_SCOPE </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">ContinuationScope</span><span style="color: #E06C75">(</span><span style="color: #98C379">&quot;VirtualThreads&quot;</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 调度器，或者说执行器，默认就是用此调度器运行虚拟线程</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ForkJoinPool</span><span style="color: #E06C75"> DEFAULT_SCHEDULER </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDefaultScheduler</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 调度线程池实例，用于唤醒带超时阻塞的虚拟线程实例，主要用于sleep的唤醒</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ScheduledExecutorService</span><span style="color: #E06C75"> UNPARKER </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDelayedTaskScheduler</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// pin模式，也就是pined thread的跟踪模式，决定打印堆栈的详细程度，来自于系统参数jdk.tracePinnedThreads，full表示详细，short表示简略</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> TRACE_PINNING_MODE </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">tracePinningMode</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 下面几个都是成员地址，用于Unsafe直接操作成员</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> STATE </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">objectFieldOffset</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">class</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;state&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> PARK_PERMIT </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">objectFieldOffset</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">class</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;parkPermit&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> CARRIER_THREAD </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">objectFieldOffset</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">class</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;carrierThread&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> TERMINATION </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">objectFieldOffset</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">class</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;termination&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 调度器实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Executor</span><span style="color: #E06C75"> scheduler</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> cont</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation实例的Runnable包装实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Runnable</span><span style="color: #E06C75"> runContinuation</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 虚拟线程状态，这个值由JVM访问和修改</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">volatile</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> state</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 下面的状态集合</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> NEW      </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> STARTED  </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> RUNNABLE </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">     </span><span style="color: #7F848E; font-style: italic">// runnable-unmounted</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> RUNNING  </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">3</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">     </span><span style="color: #7F848E; font-style: italic">// runnable-mounted</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> PARKING  </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> PARKED   </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">5</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">     </span><span style="color: #7F848E; font-style: italic">// unmounted</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> PINNED   </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">6</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">     </span><span style="color: #7F848E; font-style: italic">// mounted</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> YIELDING </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">7</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">     </span><span style="color: #7F848E; font-style: italic">// Thread.yield</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> TERMINATED </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">99</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75">  </span><span style="color: #7F848E; font-style: italic">// final state</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 虚拟线程unmount后可以从调度过程中挂起的状态</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> SUSPENDED </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">1</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">&lt;&lt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">8</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> RUNNABLE_SUSPENDED </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (RUNNABLE </span><span style="color: #56B6C2">|</span><span style="color: #E06C75"> SUSPENDED)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> PARKED_SUSPENDED   </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (PARKED </span><span style="color: #56B6C2">|</span><span style="color: #E06C75"> SUSPENDED)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// park操作许可</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">volatile</span><span style="color: #E06C75"> </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> parkPermit</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 运载线程实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">volatile</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> carrierThread</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 终结倒数栅栏实例，主要用于join操作</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">volatile</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">CountDownLatch</span><span style="color: #E06C75"> termination</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 唯一构造函数</span></span>
<span class="line"><span style="color: #61AFEF">VirtualThread</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">Executor</span><span style="color: #E06C75"> scheduler</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">String</span><span style="color: #E06C75"> name</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> characteristics</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Runnable</span><span style="color: #E06C75"> task) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 默认标记bound为false，当bound为true的时候标记为绑定到系统线程</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">super</span><span style="color: #E06C75">(name</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> characteristics</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #7F848E; font-style: italic">/*bound*/</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">Objects</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">requireNonNull</span><span style="color: #ABB2BF">(task);</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果传入的调度器实例非空则直接使用</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 否则，如果父线程是虚拟线程，则使用父虚拟线程的调度器实例</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果传入的调度器实例为空，父线程为平台线程，那么使用默认的调度器</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// choose scheduler if not specified</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (scheduler </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> parent </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">currentThread</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parent </span><span style="color: #C678DD">instanceof</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">VirtualThread</span><span style="color: #E06C75"> vparent) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            scheduler </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">vparent</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scheduler</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            scheduler </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> DEFAULT_SCHEDULER</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 赋值调度器</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">scheduler</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> scheduler</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 封装和初始化Continuation</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">cont</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">VThreadContinuation</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> task)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 初始化Continuation的Runnable包装器，最终提交到调度器中执行</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">runContinuation</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #C678DD">::</span><span style="color: #E06C75">runContinuation</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 虚拟线程Continuation的专有子类，默认为ContinuationScope(&quot;VirtualThreads&quot;)，从而实现Continuation.enter()执行时候实际上执行的是VirtualThread.run()方法</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 也就是 Runnable.run()[runContinuation by carrier thread from executor] --&gt; Continuation.run() --&gt; Continuation.enter() --&gt; VirtualThread.run() --&gt; Runnable.run()[user task]</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">class</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">VThreadContinuation</span><span style="color: #E06C75"> </span><span style="color: #C678DD">extends</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Continuation</span><span style="color: #E06C75"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">VThreadContinuation</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">VirtualThread</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">vthread</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">Runnable</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">task</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #E5C07B">super</span><span style="color: #ABB2BF">(VTHREAD_SCOPE, () </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">vthread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">(task));</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// pin之前回调的方法，基于TRACE_PINNING_MODE的返回值决定pinned线程栈的打印详略</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">Override</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">protected</span><span style="color: #61AFEF"> </span><span style="color: #C678DD">void</span><span style="color: #61AFEF"> onPinned</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">Continuation</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">Pinned</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75; font-style: italic">reason</span><span style="color: #ABB2BF">)</span><span style="color: #61AFEF"> </span><span style="color: #ABB2BF">&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">        </span><span style="color: #C678DD">if</span><span style="color: #ABB2BF"> (TRACE_PINNING_MODE </span><span style="color: #56B6C2">&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">) &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">boolean</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">printAll</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> (TRACE_PINNING_MODE </span><span style="color: #56B6C2">==</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #E5C07B">PinnedThreadPrinter</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">printStackTrace</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">out</span><span style="color: #ABB2BF">, printAll);</span></span>
<span class="line"><span style="color: #ABB2BF">        &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">    &#125;</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 在当前线程上运行或继续Continuation的执行，必须由平台线程运行此方法，最终会封装为Runnble包装器提交到执行器中运行</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">runContinuation</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// the carrier must be a platform thread</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">currentThread</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">isVirtual</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">WrongThreadException</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// set state to RUNNING</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> firstRun</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> initialState </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">state</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 当前为STARTED状态并且CAS更新为RUNNING状态则标记首次运行为true</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (initialState </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> STARTED </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">compareAndSetState</span><span style="color: #E06C75">(STARTED</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> RUNNING)) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// first run</span></span>
<span class="line"><span style="color: #E06C75">        firstRun </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (initialState </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> RUNNABLE </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">compareAndSetState</span><span style="color: #E06C75">(RUNNABLE</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> RUNNING)) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 当前为RUNNABLE状态并且CAS更新为RUNNING状态则标记首次运行为false，并且设置park许可为false</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// consume parking permit</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">setParkPermit</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        firstRun </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// not runnable</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// notify JVMTI before mount</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (notifyJvmtiEvents) </span><span style="color: #61AFEF">notifyJvmtiMountBegin</span><span style="color: #E06C75">(firstRun)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 执行Continuation.run()</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">cont</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// Continuation执行完成，回调钩子方法afterTerminate</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">cont</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">isDone</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">afterTerminate</span><span style="color: #E06C75">(</span><span style="color: #7F848E; font-style: italic">/*executed*/</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// Continuation没有执行完成，说明调用了Continuation.yield或者pin到运载线程中进行了park操作</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">afterYield</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Continuation执行完成回调的钩子方法</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">afterTerminate</span><span style="color: #E06C75">(</span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> executed) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> TERMINATED) </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> (carrierThread </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (executed) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (notifyJvmtiEvents) </span><span style="color: #61AFEF">notifyJvmtiUnmountEnd</span><span style="color: #E06C75">(</span><span style="color: #D19A66">true</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果有其他线程阻塞等待虚拟线程的返回，例如调用了join方法，那么在这里解除阻塞</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">CountDownLatch</span><span style="color: #E06C75"> termination </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (termination </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getCount</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">countDown</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果执行成功则通知线程容器当前线程实例退出，清空线程本地变量引用</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (executed) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// notify container if thread executed</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">threadContainer</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">onExit</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// clear references to thread locals</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">clearReferences</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 由于Continuation的yield操作或者调用了Thread.yield()导致Continuation挂起，需要重新把Continuation的包装器&quot;懒提交&quot;到调度器中</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">afterYield</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> s </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">state</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> (s </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> PARKING </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> s </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> YIELDING) </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> (carrierThread </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果是PARKING状态，这种对应于Continuation的yield操作调用</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (s </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> PARKING) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 更变为PARKED状态</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(PARKED)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// notify JVMTI that unmount has completed, thread is parked</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (notifyJvmtiEvents) </span><span style="color: #61AFEF">notifyJvmtiUnmountEnd</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 得到park许可，并且CAS为RUNNABLE状态</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parkPermit </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">compareAndSetState</span><span style="color: #E06C75">(PARKED</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> RUNNABLE)) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 进行懒提交，如果可能的话，用当前线程作为运载线程继续执行任务</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">lazySubmitRunContinuation</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (s </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> YIELDING) &#123;   </span><span style="color: #7F848E; font-style: italic">// 如果是YIELDING状态，这种对应于调用了Thread.yield</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 更变为RUNNABLE状态</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(RUNNABLE)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// notify JVMTI that unmount has completed, thread is runnable</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (notifyJvmtiEvents) </span><span style="color: #61AFEF">notifyJvmtiUnmountEnd</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 进行懒提交，如果可能的话，用当前线程作为运载线程继续执行任</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">lazySubmitRunContinuation</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p>这里唯一的构造函数是比较复杂的，抛开一些钩子接口，最终想达到的效果就是：</p>
<div class="language-shell"><button title="Copy code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #61AFEF">Runnable.run</span><span style="color: #ABB2BF">()[runContinuation by carrier thread from executor] --&gt; </span><span style="color: #61AFEF">Continuation.run</span><span style="color: #ABB2BF">() --&gt; Continuation.enter() --&gt; </span><span style="color: #61AFEF">VirtualThread.run</span><span style="color: #ABB2BF">() --&gt; Runnable.run()[user task]</span></span></code></pre></div><p>用户任务实际被包裹了很多层，在最里面一层才会回调。<code>VirtualThread</code>中提供了两个静态全局的线程池实例，一个用于调度，一个用于唤醒，这里看看两个线程池是如何构造的：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.VirtualThread</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ForkJoinPool</span><span style="color: #E06C75"> DEFAULT_SCHEDULER </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDefaultScheduler</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #C678DD">final</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ScheduledExecutorService</span><span style="color: #E06C75"> UNPARKER </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDelayedTaskScheduler</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 创建默认的调度器</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ForkJoinPool</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDefaultScheduler</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 线程工厂，默认创建CarrierThread实例，CarrierThread是ForkJoinWorkerThread的一个子类</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">ForkJoinWorkerThreadFactory</span><span style="color: #E06C75"> factory </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> pool </span><span style="color: #C678DD">-&gt;</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">PrivilegedAction</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ForkJoinWorkerThread</span><span style="color: #ABB2BF">&gt;</span><span style="color: #E06C75"> pa </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> () </span><span style="color: #C678DD">-&gt;</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">CarrierThread</span><span style="color: #E06C75">(pool)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">AccessController</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">doPrivileged</span><span style="color: #ABB2BF">(pa);</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">PrivilegedAction</span><span style="color: #ABB2BF">&lt;</span><span style="color: #E5C07B">ForkJoinPool</span><span style="color: #ABB2BF">&gt;</span><span style="color: #E06C75"> pa </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> () </span><span style="color: #C678DD">-&gt;</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> parallelism</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> maxPoolSize</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> minRunnable</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">String</span><span style="color: #E06C75"> parallelismValue </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getProperty</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;jdk.virtualThreadScheduler.parallelism&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">String</span><span style="color: #E06C75"> maxPoolSizeValue </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getProperty</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;jdk.virtualThreadScheduler.maxPoolSize&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">String</span><span style="color: #E06C75"> minRunnableValue </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getProperty</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;jdk.virtualThreadScheduler.minRunnable&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (parallelismValue </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            parallelism </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">parseInt</span><span style="color: #ABB2BF">(parallelismValue);</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            parallelism </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Runtime</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getRuntime</span><span style="color: #ABB2BF">().</span><span style="color: #61AFEF">availableProcessors</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (maxPoolSizeValue </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            maxPoolSize </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">parseInt</span><span style="color: #ABB2BF">(maxPoolSizeValue);</span></span>
<span class="line"><span style="color: #E06C75">            parallelism </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">min</span><span style="color: #ABB2BF">(parallelism, maxPoolSize);</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            maxPoolSize </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">max</span><span style="color: #ABB2BF">(parallelism, </span><span style="color: #D19A66">256</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (minRunnableValue </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            minRunnable </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">parseInt</span><span style="color: #ABB2BF">(minRunnableValue);</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            minRunnable </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">max</span><span style="color: #ABB2BF">(parallelism </span><span style="color: #56B6C2">/</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">2</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">UncaughtExceptionHandler</span><span style="color: #E06C75"> handler </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (t</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> e) </span><span style="color: #C678DD">-&gt;</span><span style="color: #E06C75"> &#123; &#125;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> asyncMode </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span><span style="color: #E06C75"> </span><span style="color: #7F848E; font-style: italic">// FIFO</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">ForkJoinPool</span><span style="color: #E06C75">(parallelism</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> factory</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> handler</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> asyncMode</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #E06C75">                        </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> maxPoolSize</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> minRunnable</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> pool </span><span style="color: #C678DD">-&gt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #D19A66">30</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> SECONDS)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">AccessController</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">doPrivileged</span><span style="color: #ABB2BF">(pa);</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 创建调度线程池，用于虚拟线程带超时时间的unpark操作</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">static</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ScheduledExecutorService</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">createDelayedTaskScheduler</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">String</span><span style="color: #E06C75"> propValue </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">GetPropertyAction</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">privilegedGetProperty</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;jdk.unparker.maxPoolSize&quot;</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">int</span><span style="color: #E06C75"> poolSize</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (propValue </span><span style="color: #56B6C2">!=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        poolSize </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Integer</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">parseInt</span><span style="color: #ABB2BF">(propValue);</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 确保至少有一个工作线程</span></span>
<span class="line"><span style="color: #E06C75">        poolSize </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">1</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">ScheduledThreadPoolExecutor</span><span style="color: #E06C75"> stpe </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> (ScheduledThreadPoolExecutor)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">Executors</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">newScheduledThreadPool</span><span style="color: #ABB2BF">(poolSize, task </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">            </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">InnocuousThread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">newThread</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;VirtualThread-unparker&quot;</span><span style="color: #ABB2BF">, task);</span></span>
<span class="line"><span style="color: #ABB2BF">        &#125;);</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 任务取消后马上从工作队列移除</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">stpe</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setRemoveOnCancelPolicy</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> stpe</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p>对于默认调度器（<code>DEFAULT_SCHEDULER</code>）的创建，它是一个<code>ForkJoinPool</code>实例，构造参数的选取如下：</p>
<ul>
<li><code>parallelism</code>参数由系统变量<code>jdk.virtualThreadScheduler.parallelism</code>决定，默认值为<code>Runtime.getRuntime().availableProcessors()</code>，如果配置了系统参数<code>jdk.virtualThreadScheduler.maxPoolSize</code>则取<code>min(parallelism,maxPoolSize)</code></li>
<li><code>maxPoolSize</code>参数由系统变量<code>jdk.virtualThreadScheduler.maxPoolSize</code>决定，默认值为<code>min(parallelism, maxPoolSize)</code></li>
<li><code>minRunnable</code>参数由系统变量<code>jdk.virtualThreadScheduler.minRunnable</code>决定，默认值为<code>max(parallelism / 2, 1)</code></li>
<li><code>asyncMode</code>参数固定值<code>true</code>，也就是选用<code>FIFO</code>模式</li>
<li><code>keepAliveTime</code>参数为固定值<code>30</code>秒</li>
<li><code>saturate</code>参数在<code>JDK17</code>引入，是一个<code>Predicate</code>函数，在此固定返回<code>true</code>，用于忽略<code>minRunnable</code>值允许线程池饱和</li>
<li>线程工厂用于创建<code>CarrierThread</code>实例，<code>CarrierThread</code>是<code>ForkJoinWorkerThread</code>的子类</li>
</ul>
<p>在<code>Intel 4C8T</code>开发机器环境中，该<code>ForkJoinPool</code>实例创建时候的几个参数分别为：<code>parallelism = 8, maxPoolSize = 256, minRunnable = 4</code>。</p>
<p>对于调度线程池（<code>UNPARKER</code>）的创建，它是一个<code>ScheduledThreadPoolExecutor</code>实例，构造参数的选取如下：</p>
<ul>
<li><code>corePoolSize</code>参数由系统变量<code>jdk.unparker.maxPoolSize</code>决定，并且确保最小值为<code>1</code></li>
<li>线程工厂用于创建<code>InnocuousThread</code>实例，线程名称为<code>VirtualThread-unparker</code></li>
</ul>
<p>接着看虚拟线程的启动方法<code>start()</code>：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.VirtualThread</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">Override</span></span>
<span class="line"><span style="color: #C678DD">public</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">start</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">start</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">ThreadContainers</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">root</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 调度虚拟线程让之运行</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">Override</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">start</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">ThreadContainer</span><span style="color: #E06C75"> container) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// CAS由NEW转换为STARTED状态</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #61AFEF">compareAndSetState</span><span style="color: #E06C75">(NEW</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> STARTED)) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">IllegalThreadStateException</span><span style="color: #E06C75">(</span><span style="color: #98C379">&quot;Already started&quot;</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 绑定当前虚拟线程到线程容器</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">setThreadContainer</span><span style="color: #E06C75">(container)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 标记为未启动</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> started </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 回调start钩子方法</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">container</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">onStart</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span><span style="color: #E06C75"> </span><span style="color: #7F848E; font-style: italic">// may throw</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 从给定容器继承extent-local绑定参数</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">inheritExtentLocalBindings</span><span style="color: #E06C75">(container)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 提交&#39;runContinuation&#39;任务到调度器</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">submitRunContinuation</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 标记为启动完成</span></span>
<span class="line"><span style="color: #E06C75">        started </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 如果启动失败，则标记最终状态和回调终结钩子方法</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E06C75">started) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(TERMINATED)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">container</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">onExit</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">afterTerminate</span><span style="color: #E06C75">(</span><span style="color: #7F848E; font-style: italic">/*executed*/</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 提交&#39;runContinuation&#39;任务到调度器</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">submitRunContinuation</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">submitRunContinuation</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 提交&#39;runContinuation&#39;任务到调度器，lazySubmit参数决定是否&quot;懒提交&quot;</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">submitRunContinuation</span><span style="color: #E06C75">(</span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> lazySubmit) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (lazySubmit </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> scheduler </span><span style="color: #C678DD">instanceof</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ForkJoinPool</span><span style="color: #E06C75"> pool) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// ForkJoinPool类型调度器并且lazySubmit为true，对runContinuation这个Runnable实例适配为ForkJoinTask类型，进行&quot;懒提交&quot;到ForkJoinPool</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">pool</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">lazySubmit</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">ForkJoinTask</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">adapt</span><span style="color: #ABB2BF">(runContinuation));</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 非ForkJoinPool类型调度器或者lazySubmit为false，直接使用Executor.execute()提交任务</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">scheduler</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">execute</span><span style="color: #ABB2BF">(runContinuation);</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">catch</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">RejectedExecutionException</span><span style="color: #E06C75"> </span><span style="color: #E06C75; font-style: italic">ree</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 线程池拒绝接收任务，发布提交失败事件到JVM</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">var</span><span style="color: #E06C75"> event </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">VirtualThreadSubmitFailedEvent</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">isEnabled</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">javaThreadId</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">threadId</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">exceptionMessage</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">ree</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">getMessage</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">commit</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> ree</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p><code>ForkJoinPool#lazySubmit()</code>是<code>JDK19</code>新增的一个<code>API</code>，它的方法注释如下：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>提交给定的任务，但不保证它最终会在没有可用活动线程的情况下执行。在某些上下文中，这种方法可以通过依赖于特定于上下文的知识来减少竞争和开销，即现有线程(如果在此池中操作，则可能包括调用线程)最终将可用来执行任务</p></blockquote>
<p>使用此方法提交的目的就是希望可以用当前调用线程去执行任务，对于首次提交<code>Continuation</code>任务可能作用不明显，但是对于<code>Continuation.yield()</code>调用后的再次提交意义比较重大，因为这样就可以<strong>把运行的<code>Continuation.run()</code>方法链分配到同一个运载线程实例</strong>，在开发者的角度就是虚拟线程任务执行中断后恢复执行，执行任务的运载线程没有改变。</p>
<p>源码中还可以发现，<code>run()</code>方法覆盖了<code>Thread#run()</code>替换为空实现，因为<code>VirtualThread</code>最终是触发<code>Continuation#run()</code>，这一点已经在<code>start()</code>方法进行提交和调度。最后分析虚拟线程的阻塞（不带超时，也就是<code>timeout = 0</code>）、限时阻塞（<code>timeout &gt; 0</code>）、<code>join</code>的实现。先看相对简单的<code>joinNanos()</code>：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.VirtualThread</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Thread.join() --&gt; VirtualThread.joinNanos()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 虚拟线程join调用</span></span>
<span class="line"><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">joinNanos</span><span style="color: #E06C75">(</span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) throws InterruptedException &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果状态为TERMINATED直接返回true</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> TERMINATED)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 获取数栅栏实例</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">CountDownLatch</span><span style="color: #E06C75"> termination </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">getTermination</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 再次验证如果状态为TERMINATED直接返回true</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> TERMINATED)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 如果nanos为0则调用CountDownLatch.await()阻塞</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (nanos </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">await</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 如果nanos大于0则调用CountDownLatch.await(nanos,TimeUnit)限时阻塞</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> terminated </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">await</span><span style="color: #ABB2BF">(nanos, NANOSECONDS);</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E06C75">terminated) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 阻塞到超时时限过了返回，非解除阻塞下的正常返回</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> TERMINATED</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 解除阻塞下的正常返回</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 懒创建终结倒数栅栏实例，设置资源值为1，这里用到CAS是考虑之前已经创建和保存到成员变量，如果已创建则直接选用成员变量的那个实例</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">CountDownLatch</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">getTermination</span><span style="color: #E06C75">() &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">CountDownLatch</span><span style="color: #E06C75"> termination </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (termination </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">null</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        termination </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">CountDownLatch</span><span style="color: #E06C75">(</span><span style="color: #D19A66">1</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">compareAndSetReference</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">, TERMINATION, </span><span style="color: #D19A66">null</span><span style="color: #ABB2BF">, termination)</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            termination </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">termination</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> termination</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span></code></pre></div><p>接着看虚拟线程阻塞和限时阻塞的现实：</p>
<div class="language-java"><button title="Copy code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro" style="background-color: #1a1a1a" tabindex="0"><code><span class="line"><span style="color: #7F848E; font-style: italic">// java.lang.VirtualThread</span></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// Thread.sleep() --&gt; VirtualThread.sleepNanos()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 给定休眠时间让当前虚拟线程休眠</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">sleepNanos</span><span style="color: #E06C75">(</span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) throws InterruptedException &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">currentThread</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// nanos必须大于等于0</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (nanos </span><span style="color: #56B6C2">&gt;=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 如果支持线程休眠事件发布则在休眠处理前后处理休眠事件，最终的休眠操作调用doSleepNanos()完成</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">ThreadSleepEvent</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">isTurnedOn</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #E5C07B">ThreadSleepEvent</span><span style="color: #E06C75"> event </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">ThreadSleepEvent</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">time</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> nanos</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">doSleepNanos</span><span style="color: #E06C75">(nanos)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">event</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">commit</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">            &#125;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">doSleepNanos</span><span style="color: #E06C75">(nanos)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 让当前线程休眠给定的睡眠时间(单位为纳秒)。如果nanos为0时，线程将尝试yield</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">doSleepNanos</span><span style="color: #E06C75">(</span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) throws InterruptedException &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> nanos </span><span style="color: #56B6C2">&gt;=</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 响应中断清理中断状态，抛出中断异常</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">getAndClearInterrupt</span><span style="color: #E06C75">())</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">InterruptedException</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (nanos </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// nanos为0的时候直接进行yield操作，具体是Continuation.yield()</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">tryYield</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// park for the sleep time</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> remainingNanos </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> nanos</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 临时变量记录开始休眠时间</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> startNanos </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">nanoTime</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">while</span><span style="color: #E06C75"> (remainingNanos </span><span style="color: #56B6C2">&gt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 剩余休眠时间大于0纳秒，进行park操作</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #61AFEF">parkNanos</span><span style="color: #E06C75">(remainingNanos)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 响应中断清理中断状态，抛出中断异常</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">getAndClearInterrupt</span><span style="color: #E06C75">()) &#123;</span></span>
<span class="line"><span style="color: #E06C75">                    </span><span style="color: #C678DD">throw</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">InterruptedException</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">                &#125;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #7F848E; font-style: italic">// 重新计算剩余休眠事件</span></span>
<span class="line"><span style="color: #E06C75">                remainingNanos </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> nanos </span><span style="color: #56B6C2">-</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">nanoTime</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">-</span><span style="color: #E06C75"> startNanos)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            &#125;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// park会消耗park许可，走到这里说明unpark了，可以重新设置许可</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">setParkPermit</span><span style="color: #E06C75">(</span><span style="color: #D19A66">true</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 当前虚拟线程park（阻塞）直至指定等候时间，进行unpark操作或者中断也能解除park状态</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">Override</span></span>
<span class="line"><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">parkNanos</span><span style="color: #E06C75">(</span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">currentThread</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 已经消耗了park许可或者处于中断状态，直接返回</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">getAndSetParkPermit</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">) </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> interrupted)</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 当前虚拟线程park（阻塞）直至指定等候时间</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (nanos </span><span style="color: #56B6C2">&gt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 记录开始park的时间</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> startTime </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">nanoTime</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 记录是否yield成功</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> yielded</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 通过调度线程池提交一个延时执行的unpark任务，用于进行unpark操作解除当前虚拟线程阻塞等待</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">Future</span><span style="color: #ABB2BF">&lt;</span><span style="color: #C678DD">?</span><span style="color: #ABB2BF">&gt;</span><span style="color: #E06C75"> unparker </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">scheduleUnpark</span><span style="color: #E06C75">(nanos)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 设置为PARKING状态</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(PARKING)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 执行Continuation.yield()</span></span>
<span class="line"><span style="color: #E06C75">            yielded </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">yieldContinuation</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> (</span><span style="color: #E5C07B">Thread</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">currentThread</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75"> </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">                    </span><span style="color: #56B6C2">&amp;&amp;</span><span style="color: #E06C75"> (</span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> RUNNING </span><span style="color: #56B6C2">||</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> PARKING)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #7F848E; font-style: italic">// 执行Continuation.yield()执行完毕后，如果该unparker任务未完成则进行取消操作</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">cancel</span><span style="color: #E06C75">(unparker)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// Continuation.yield()调用失败，则重新计算等待时间并基于运载线程进行park操作</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E06C75">yielded) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> deadline </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> startTime </span><span style="color: #56B6C2">+</span><span style="color: #E06C75"> nanos</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (deadline </span><span style="color: #56B6C2">&lt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0L</span><span style="color: #E06C75">)</span></span>
<span class="line"><span style="color: #E06C75">                deadline </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Long</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">MAX_VALUE</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #61AFEF">parkOnCarrierThread</span><span style="color: #E06C75">(</span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> deadline </span><span style="color: #56B6C2">-</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">System</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">nanoTime</span><span style="color: #ABB2BF">()</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 当前虚拟线程的运载线程park（阻塞）直至指定等候时间，这就是前面提到过的pinned thread产生的过程</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">parkOnCarrierThread</span><span style="color: #E06C75">(</span><span style="color: #C678DD">boolean</span><span style="color: #E06C75"> timed</span><span style="color: #ABB2BF">,</span><span style="color: #E06C75"> </span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">assert</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">state</span><span style="color: #E06C75">() </span><span style="color: #56B6C2">==</span><span style="color: #E06C75"> PARKING</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">var</span><span style="color: #E06C75"> pinnedEvent </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #C678DD">new</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">VirtualThreadPinnedEvent</span><span style="color: #E06C75">()</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">pinnedEvent</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">begin</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 设置状态为PINNED</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(PINNED)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 如果没有park许可，则不处理，否则使用Usafe的park api进行平台线程阻塞</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E06C75">parkPermit) &#123;</span></span>
<span class="line"><span style="color: #E06C75">            </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E06C75">timed) &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">park</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">, </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">            &#125; </span><span style="color: #C678DD">else</span><span style="color: #E06C75"> </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (nanos </span><span style="color: #56B6C2">&gt;</span><span style="color: #E06C75"> </span><span style="color: #D19A66">0</span><span style="color: #E06C75">) &#123;</span></span>
<span class="line"><span style="color: #E06C75">                </span><span style="color: #E5C07B">U</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">park</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">, nanos);</span></span>
<span class="line"><span style="color: #E06C75">            &#125;</span></span>
<span class="line"><span style="color: #E06C75">        &#125;</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #7F848E; font-style: italic">// 阻塞解除后状态为RUNNING</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #61AFEF">setState</span><span style="color: #E06C75">(RUNNING)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// 解除阻塞后此park操作消耗了park许可</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #61AFEF">setParkPermit</span><span style="color: #E06C75">(</span><span style="color: #D19A66">false</span><span style="color: #E06C75">)</span><span style="color: #ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">pinnedEvent</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">commit</span><span style="color: #ABB2BF">();</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">ChangesCurrentThread</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">Future</span><span style="color: #56B6C2">&lt;</span><span style="color: #C678DD">?</span><span style="color: #56B6C2">&gt;</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">scheduleUnpark</span><span style="color: #E06C75">(</span><span style="color: #C678DD">long</span><span style="color: #E06C75"> nanos) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">Thread</span><span style="color: #E06C75"> carrier </span><span style="color: #56B6C2">=</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">carrierThread</span><span style="color: #ABB2BF">;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #7F848E; font-style: italic">// need to switch to current platform thread to avoid nested parking</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #E5C07B">carrier</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setCurrentThread</span><span style="color: #ABB2BF">(carrier);</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">try</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #C678DD">return</span><span style="color: #E06C75"> </span><span style="color: #E5C07B">UNPARKER</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">schedule</span><span style="color: #ABB2BF">(() </span><span style="color: #C678DD">-&gt;</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">unpark</span><span style="color: #ABB2BF">(), nanos, NANOSECONDS);</span></span>
<span class="line"><span style="color: #E06C75">    &#125; </span><span style="color: #C678DD">finally</span><span style="color: #E06C75"> &#123;</span></span>
<span class="line"><span style="color: #E06C75">        </span><span style="color: #E5C07B">carrier</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">setCurrentThread</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">this</span><span style="color: #ABB2BF">);</span></span>
<span class="line"><span style="color: #E06C75">    &#125;</span></span>
<span class="line"><span style="color: #E06C75">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #7F848E; font-style: italic">// 如果unpark任务未完成则取消它，这个过程需要切换到当前平台线程以避免嵌套park操作</span></span>
<span class="line"><span style="color: #ABB2BF">@</span><span style="color: #E5C07B">ChangesCurrentThread</span></span>
<span class="line"><span style="color: #C678DD">private</span><span style="color: #E06C75"> </span><span style="color: #C678DD">void</span><span style="color: #E06C75"> </span><span style="color: #61AFEF">cancel</span><span style="color: #E06C75">(</span><span style="color: #E5C07B">Future</span><span style="color: #56B6C2">&lt;</span><span style="color: #C678DD">?</span><span style="color: #56B6C2">&gt;</span><span style="color: #E06C75"> future) &#123;</span></span>
<span class="line"><span style="color: #E06C75">    </span><span style="color: #C678DD">if</span><span style="color: #E06C75"> (</span><span style="color: #56B6C2">!</span><span style="color: #E5C07B">future</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">isDone</sp',
        1, 0, 0, '2023-12-31 00:44:57.000000', '2023-12-31 00:45:00.000000', null, null, 0, 1718181725051314178, 1, 1);
